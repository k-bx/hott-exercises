module ex01_03 where

-- prerequisites

Path     (A : U) (a b : A) : U = PathP (<i> A) a b
refl     (A : U) (a : A) : Path A a a = <i> a

data pair (A : U) (B : U)
  = pairC (a : A) (b : B)

ind_pair
  (A : U)
  (B : U)
  (C : (pair A B) -> U)
  (g : (x : A) -> (y : B) -> C (pairC x y))
  : ((z : pair A B) -> C z)
  = split
  pairC a b -> g a b

pair_pr1 (A B : U) : (pair A B) -> A = split
  pairC a b -> a

pair_pr2 (A B : U) : (pair A B) -> B = split
  pairC a b -> b

-- uniq_pair_nonworking
--   (A B : U)
--   (x : pair A B)
--   : Path (pair A B) (pairC (pair_pr1 A B x)
--                            (pair_pr2 A B x))
--                     x
--   = refl (pair A B) x

-- Maxim pointed out that beta-reductions and fusion work out of the
-- box only with Pi and Sigma, but here I've used an inductive type
-- (via `data`), thus I need to make a case-analysis and prove
-- separately for every constructor (only `pairC` in this case)
uniq_pair_nonworking_fixed
  (A B : U)
  (x : pair A B)
  : Path (pair A B) (pairC (pair_pr1 A B x)
                           (pair_pr2 A B x))
                    x
  = split pairC a b -> <i> pairC a b

uniq_pair
  (A B : U)
  (a : A)
  (b : B)
  : Path (pair A B) (pairC (pair_pr1 A B (pairC a b))
                           (pair_pr2 A B (pairC a b)))
                    (pairC a b)
  = refl (pair A B) (pairC a b)

-- exercise

ind_pair_proj
  (A : U)
  (B : U)
  (C : (pair A B) -> U)
  (g : (x : A) -> (y : B) -> C (pairC x y))
  (z : pair A B)
  : C z
  = ?
  -- = g (pair_pr1 A B z) (pair_pr2 A B z)
