module ex01_01 where

-- prerequisites

Path     (A: U) (a b: A): U = PathP (<i> A) a b
refl     (A: U) (a: A): Path A a a = <i> a

-- exercise

compose (A B C: U) (g: B -> C) (f: A -> B) : (A -> C)
  = \(x:A) -> g (f x)

composeAssoc
  (A B C D: U)
  (h: C -> D)
  (g: B -> C)
  (f: A -> B)
  : Path (A -> D) (compose A C D h (compose A B C g f)) (compose A B D (compose B C D h g) f)
  = refl (A -> D) (compose A C D h (compose A B C g f))
